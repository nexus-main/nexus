@inject AppState AppState
@inject IJSInProcessRuntime JSRuntime

<div class="group text-gray-200 cursor-pointer hover:bg-cyan-800 p-2 pt-1 rounded select-none">
    <div>
        <span class="text-sm">@SelectedItem.AugmentedResourceId</span>
        <span class="text-xs text-gray-400 ml-2">@Utilities.ToSpaceFilledCatalogId(SelectedItem.BaseItem.Catalog.Id)</span>
    </div>
    <div class="flex flex-wrap gap-1">

        @foreach (var kind in SelectedItem.Kinds)
        {
            <div class="nexus-pill nexus-hover-parent min-w-[6em] h-6 text-xs text-white rounded @(IsValid(kind) ? "bg-teal-600" : "bg-rose-700") flex flex-col" placeholder="@kind">
                <div class="nexus-hover-hide py-1 text-center">@kind</div>
                <div class="hidden flex-1 flex nexus-hover-flex">
                    <div @onclick="() => CopyToClipboard(kind)" class="flex-1 hover:@(IsValid(kind) ? "bg-teal-500" : "bg-rose-600") rounded-l mdi mdi-content-copy flex justify-center items-center"></div>
                    <div @onclick="() => RemoveRepresentationKind(kind)" class="flex-1 hover:@(IsValid(kind) ? "bg-teal-500" : "bg-rose-600") rounded-r mdi mdi-close flex justify-center items-center"></div>
                </div>
            </div>
        }

        @if (_kinds.Any())
        {
            <div class="invisible group-hover:visible">
                <div @onclick="() => _aggregationKindPopupIsOpen = true" class="text-xs font-semibold rounded bg-teal-600 text-gray-300 hover:bg-teal-500 px-2.5 py-1">
                    +
                </div>
            </div>
        }
    </div>

    <!-- https://github.com/MudBlazor/MudBlazor/issues/6357 -->
    <MudOverlay @bind-Visible="_aggregationKindPopupIsOpen" AutoClose="true" />

    <MudPopover
        Open="_aggregationKindPopupIsOpen"
        Class="p-4"
        AnchorOrigin="Origin.TopRight"
        TransformOrigin="Origin.TopLeft"
        RelativeWidth="DropdownWidth.Relative">

        <MudChipSet 
            T="RepresentationKind"
            SelectionMode="SelectionMode.MultiSelection"
            CheckMark>

            @foreach (var kind in _kinds)
            {
                <MudTooltip
                    Text="@(_kindToTooltipMap.ContainsKey(kind) ? _kindToTooltipMap[kind] : kind.ToString())"
                    Delay="1000">

                    <MudChip
                        Selected="SelectedItem.Kinds.Contains(kind)"
                        SelectedChanged="selected => OnKindSelectionChanged(selected, kind)"
                        Size="Size.Small"
                        Value="kind"
                        Text="@(_kindToDisplayNameMap.ContainsKey(kind) ? _kindToDisplayNameMap[kind] : kind.ToString())"
                        Variant="Variant.Outlined"
                        SelectedColor="Color.Primary" />

                </MudTooltip>
            }
            
        </MudChipSet>

    </MudPopover>
</div>

@code {

    private Dictionary<RepresentationKind, string> _kindToDisplayNameMap = new()
    {
        [RepresentationKind.MeanPolarDeg] = "Mean polar (deg)",
        [RepresentationKind.Std] = "STD",
        [RepresentationKind.Rms] = "RMS",
        [RepresentationKind.MinBitwise] = "Minimum (bitwise)",
        [RepresentationKind.MaxBitwise] = "Maximum (bitwise)",
    };

    private Dictionary<RepresentationKind, string> _kindToTooltipMap = new()
    {
        [RepresentationKind.Original] = "Original frequency",
        [RepresentationKind.Resampled] = "Resampled to the currently selected period",
        [RepresentationKind.Mean] = "Arithmetic mean",
        [RepresentationKind.MeanPolarDeg] = "Circular mean for angles in degrees",
        [RepresentationKind.Min] = "Minimum",
        [RepresentationKind.Max] = "Maximum",
        [RepresentationKind.Std] = "Standard deviation",
        [RepresentationKind.Rms] = "Root mean square",
        [RepresentationKind.MinBitwise] = "Minimum of individual bits",
        [RepresentationKind.MaxBitwise] = "Maximum of individual bits",
        [RepresentationKind.Sum] = "Summation"
    };

    private bool _aggregationKindPopupIsOpen;

    private IReadOnlyCollection<RepresentationKind> _kinds = default!;

    [Parameter]
    public CatalogItemSelectionViewModel SelectedItem { get; set; } = default!;

    protected override void OnParametersSet()
    {
        _kinds = GetKinds();
    }

    private void CopyToClipboard(RepresentationKind kind)
    {
        var resourcePath = SelectedItem.GetResourcePath(kind, AppState.Settings.SamplePeriod.Value);
        JSRuntime.InvokeVoid("nexus.util.copyToClipboard", resourcePath);
    }

    private IReadOnlyCollection<RepresentationKind> GetKinds()
    {
        return Enum
            .GetValues<RepresentationKind>()
            .Where(kind => SelectedItem.IsValid(kind, AppState.Settings.SamplePeriod))
            .ToList();
    }

    private bool IsValid(RepresentationKind kind)
    {
        return SelectedItem.IsValid(kind, AppState.Settings.SamplePeriod);
    }

    private void OnKindSelectionChanged(bool selected, RepresentationKind kind)
    {
        if (selected)
        {
            SelectedItem.Kinds.Add(kind);
            _kinds = GetKinds();
            AppState.Settings.CanExportChanged();
            AppState.Settings.CanVisualizeChanged();
        }

        else
        {
            RemoveRepresentationKind(kind);
        }
    }

    private void RemoveRepresentationKind(RepresentationKind kind)
    {
        if (SelectedItem.Kinds.Count == 1)
        {
            AppState.Settings.ToggleCatalogItemSelection(SelectedItem);
        }

        else
        {
            SelectedItem.Kinds.Remove(kind);
            _kinds = GetKinds();
            AppState.Settings.CanExportChanged();
            AppState.Settings.CanVisualizeChanged();   
        }
    }
}