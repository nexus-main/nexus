@using System.Net
@using System.Security.Claims
@using System.Text.Encodings.Web

@inject AppState AppState
@inject ISnackbar Snackbar
@inject INexusClient Client
@inject IJSInProcessRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="
    mx-3 w-9 h-9 flex justify-center items-center rounded-full text-white bg-cyan-900 hover:bg-cyan-700 cursor-pointer select-none
    @(IsAdmin(_authenticationState.User) ? "border-2 border-orange-500" : "")"
@onclick="ShowUserSettingsDialog">
    @GetInitials(_authenticationState.User.Identity!.Name!)
</div>

<UIDialog 
@bind-Visible="_showUserSettingsDialog" 
MaxWidth="MaxWidth.Medium">

    <TitleContent>
        <MudText Typo="Typo.h6">
            Settings
        </MudText>
    </TitleContent>

    <DialogContent>

        <MudTabs 
        Class="min-h-[20rem]"
        Outlined="true" 
        Position="MudBlazor.Position.Top" 
        Rounded="true" 
        Border="true"
        ApplyEffectsToContainer="true" PanelClass="pa-6">

            <MudTabPanel Text="General" Icon="@Icons.Material.Filled.SettingsEthernet">

                <div class="text-cyan-700 border-b my-3 text-lg">Permissions</div>

                <div>
                    <MudText>Click on this button to update your permissions.</MudText>
                    <form action="/api/v1/users/reauthenticate" class="flex justify-center">
                        <MudButton 
                            ButtonType="ButtonType.Submit"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Refresh"
                            Variant="Variant.Text">
                            Update
                        </MudButton>
                    </form>
                </div>

                <div class="text-cyan-700 border-b my-3 text-lg">Hide catalogs</div>

                <div class="flex flex-col gap-5">

                    @if (AppState.UISettings.CatalogHidePatterns is not null)
                    {
                        <div class="flex flex-col gap-2">

                            @for (int i = 0; i < AppState.UISettings.CatalogHidePatterns.Count; i++)
                            {
                                var local = i;

                                <div class="flex items-end gap-3">
                                    <MudTextField
                                        Class="flex-1"
                                        T="string" 
                                        Variant="Variant.Text"
                                        Placeholder="^/MY/CATALOG/PATH"
                                        @bind-Value:get="AppState.UISettings.CatalogHidePatterns[local]"
                                        @bind-Value:set="value =>
                                        {
                                            AppState.UISettings.CatalogHidePatterns[local] = value;
                                            SaveUISettings();
                                        }" />

                                    <div>
                                        <MudIconButton 
                                            Icon="@Icons.Material.Filled.Delete"
                                            Size="Size.Medium"
                                            OnClick="() => 
                                            {
                                                AppState.UISettings.CatalogHidePatterns.RemoveAt(local);
                                                SaveUISettings();
                                            }" />
                                    </div>
                                </div>
                            }

                            <MudText Typo="Typo.caption">
                                The catalog(s) you want to hide (regex pattern; reload page to apply changes)
                            </MudText>

                        </div>

                        <div class="flex justify-center">
                            <MudIconButton
                                OnClick="() => 
                                {
                                    AppState.UISettings.CatalogHidePatterns.Add(default);
                                    SaveUISettings();
                                }"
                                Color="Color.Primary"
                                Icon="@Icons.Material.Outlined.Add">
                                Add
                            </MudIconButton>
                        </div>

                    }

                </div>

            </MudTabPanel>

            <MudTabPanel Text="Personal Access Tokens" Icon="@Icons.Material.Filled.Key">
                <div class="text-cyan-700 border-b my-3 text-lg">New Token</div>

                <div class="ml-4">

                    @if (_newAccessToken is not null)
                    {
                        <div class="text-sm mb-3">This is your newly generated token. Make a copy and store it safely as you will not be able to see it again.</div>
                        <div class="flex items-center text-gray-400">
                            <span class="text-sm break-all mr-3 bg-gray-100 rounded-lg p-3">@_newAccessToken</span>
                            <MudIconButton
                                OnClick="CopyToClipboard"
                                Icon="@Icons.Material.Filled.ContentCopy" />
                        </div>
                    }
                    else
                    {
                        if (_isRefreshingToken)
                        {
                            <div class="flex items-center mx-auto">
                                <MudProgressCircular 
                                Color="Color.Primary"
                                Indeterminate=true />
                                <span class="ml-3 text-gray-400">Creating ...</span>
                            </div>
                        }
                        else
                        {
                            <div class="flex flex-col gap-5">

                                <div class="flex-1 flex flex-col gap-5">

                                    <div class="flex gap-5">

                                        <MudTextField
                                        Class="flex-1"
                                        T="string" 
                                        Placeholder="Enter your description here ..."
                                        Variant="Variant.Text" 
                                        Immediate="true"
                                        @bind-Text="@_newAccessTokenDescription" />

                                        <div class="flex flex-col">

                                            <MudDatePicker 
                                            Label="Expiration"
                                            Clearable="true"
                                            @bind-Date="_newAccessTokenExpiration" />

                                            @if (_newAccessTokenExpiration is null)
                                            {
                                                <MudText Typo="Typo.caption">(expires never)</MudText>
                                            }

                                        </div>

                                    </div>

                                    @if (IsAdmin(_authenticationState.User))
                                    {
                                        <div class="flex gap-5">
                                            <MudSwitch
                                            Color="Color.Primary"
                                            Label="Privileged"
                                            @bind-Value="_newAccessTokenIsAdmin" />
                                        </div>
                                    }

                                    <div class="flex flex-col gap-2">

                                        @for (int i = 0; i < _newAccessTokenClaims.Count; i++)
                                        {
                                            var local = i;

                                            <div class="flex items-end gap-3">
                                                <MudTextField
                                                Class="flex-1"
                                                T="string" 
                                                Variant="Variant.Text"
                                                Placeholder="^/MY/CATALOG/PATH"
                                                @bind-Value="_newAccessTokenClaims[local].CatalogPattern" />

                                                <MudSwitch
                                                Color="Color.Primary"
                                                Label="Write Access"
                                                @bind-Value="_newAccessTokenClaims[local].WriteAccess" />

                                                <div>
                                                    <MudIconButton 
                                                    Icon="@Icons.Material.Filled.Delete"
                                                    Size="Size.Medium"
                                                    OnClick="() => _newAccessTokenClaims.RemoveAt(local)" />
                                                </div>
                                            </div>
                                        }

                                        <MudText Typo="Typo.caption">
                                            The catalog(s) you want to access (regex pattern)
                                        </MudText>

                                    </div>

                                </div>

                                <div class="flex justify-center">
                                    <MudIconButton
                                    OnClick="() => _newAccessTokenClaims.Add(new ClaimData(default, default))"
                                    Color="Color.Primary"
                                    Icon="@Icons.Material.Outlined.Add">
                                        Add
                                    </MudIconButton>
                                </div>

                                <div class="flex justify-center">
                                    <MudButton
                                    OnClick="CreateTokenAsync"
                                    Color="Color.Primary"
                                    Variant="Variant.Outlined"
                                    Disabled="string.IsNullOrWhiteSpace(_newAccessTokenDescription)">
                                        Create Token
                                    </MudButton>
                                </div>

                            </div>
                        }
                    }

                </div>

                <div class="text-cyan-700 border-b my-3 text-lg">Available Tokens</div>

                @if (_accessTokenMap is null)
                {
                    <div class="flex items-center mx-auto">
                        <MudProgressCircular 
                        Color="Color.Primary"
                        Indeterminate=true />
                        <span class="ml-3 text-gray-400">Acquiring access tokens ...</span>
                    </div>
                }

                else
                {
                    <div class="flex flex-col gap-2 ml-4">

                        @foreach (var (id, accessToken) in _accessTokenMap)
                        {
                            <div class="flex items-center text-gray-400 border select-none hover:border-gray-400 rounded-lg px-2 py-1">
                                <div>
                                    <div>@accessToken.Description</div>
                                    <div class="text-sm font-bold">@(accessToken.Expires == DateTime.MaxValue ? "expires never" : "expires on " + accessToken.Expires.Date.ToString("yyyy-MM-dd"))</div>
                                </div>
                                <MudIconButton
                                OnClick="() => DeleteTokenAsync(Guid.Parse(id))"
                                Icon="@Icons.Material.Filled.Delete"
                                Class="ml-auto" />
                            </div>
                        }

                    </div>
                }
            </MudTabPanel>

            <MudTabPanel Text="Request Configuration" Icon="@Icons.Custom.FileFormats.FileCode">
                <div class="text-sm mb-3">In the text area below you can add your user specific configuration which will be sent to the Nexus backend on every request.</div>

                <div class="flex-1">

                    <div class="flex flex-col h-1/2">
                        <div class="text-cyan-700 border-b mb-1">Input (JSON)</div>
                        <textarea 
                        spellcheck="false"
                        class="w-full flex-1 bg-gray-100 p-2" 
                        placeholder="Put your configuration here." 
                        style="resize:none" 
                        @bind="_jsonString" @bind:event="oninput">
                        </textarea>
                    </div>


                    <div class="h-1/2">
                        <div class="text-cyan-700 border-b mb-1 mt-2">Preview</div>
                        <pre class="p-2 text-gray-400">
                            <code>
                                @GetHighlightedCode()
                            </code>
                        </pre>
                    </div>

                </div>
            </MudTabPanel>

        </MudTabs>

    </DialogContent>

    <DialogActions>
        <form action="/api/v1/users/signout?returnUrl=@(WebUtility.UrlEncode(NavigationManager.Uri))" method="post">
            <MudButton 
            ButtonType="ButtonType.Submit"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Outlined.Logout">
                Sign-Out
            </MudButton>
        </form>
    </DialogActions>

</UIDialog>

@code {

    private class ClaimData
    {
        public ClaimData(string? catalogPattern, bool writeAccess)
        {
            CatalogPattern = catalogPattern;
            WriteAccess = writeAccess;
        }

        public string? CatalogPattern { get; set; }

        public bool WriteAccess { get; set; }
    }

    private static JsonSerializerOptions _options = new JsonSerializerOptions()
    {
        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
        WriteIndented = true
    };

    private string? _jsonString;

    private string? _newAccessToken;

    private DateTime? _newAccessTokenExpiration;

    private bool _newAccessTokenIsAdmin;

    private string? _newAccessTokenDescription;

    private List<ClaimData> _newAccessTokenClaims = [new ClaimData(default, default)];

    private IReadOnlyDictionary<string, PersonalAccessToken>? _accessTokenMap;

    private bool _isRefreshingToken;

    private bool _showUserSettingsDialog;

    private AuthenticationState _authenticationState = default!;

    [CascadingParameter]
    public Task<AuthenticationState> GetAuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _authenticationState = await GetAuthenticationStateTask;

        if (AppState.UISettings.CatalogHidePatterns is null)
            AppState.UISettings = AppState.UISettings with { CatalogHidePatterns = new() };

        var jsonElement = AppState.UISettings.RequestConfiguration;

        _jsonString = JsonSerializer
            .Serialize(jsonElement, _options);

        try
        {
            _accessTokenMap = (await Client.V1.Users.GetMeAsync()).PersonalAccessTokens;
        }
        catch (Exception ex)
        {
            AppState.AddError(ex, Snackbar);
        }
    }

    private void SaveUISettings()
    {
        AppState.UISettings = AppState.UISettings;
    }

    private bool IsAdmin(ClaimsPrincipal user)
    {
        return user
            .IsInRole("Administrator");
    }

    private void ShowUserSettingsDialog()
    {
        _showUserSettingsDialog = true;
        _newAccessToken = default;
    }

    private void CopyToClipboard()
    {
        JSRuntime.InvokeVoid("nexus.util.copyToClipboard", _newAccessToken);
    }

    private async Task CreateTokenAsync()
    {
        if (_newAccessTokenDescription is null)
            return;

        _isRefreshingToken = true;
        StateHasChanged();

        try
        {
            var claims = _newAccessTokenClaims

                .Where(
                    claimData => claimData is not null &&
                    claimData.CatalogPattern is not null)

                .Select(claimData => new TokenClaim(
                    claimData.WriteAccess ? "CanWriteCatalog" : "CanReadCatalog",
                    claimData.CatalogPattern!))

                .ToList();

            if (_newAccessTokenIsAdmin)
                claims.Add(new TokenClaim("role", "Administrator"));

            var token = new PersonalAccessToken(
                _newAccessTokenDescription,
                _newAccessTokenExpiration.HasValue 
                    ? _newAccessTokenExpiration.Value.ToUniversalTime()
                    : DateTime.MaxValue,
                claims
            );

            _newAccessToken = await Client.V1.Users.CreateTokenAsync(token);

            _newAccessTokenDescription = default;
            _newAccessTokenExpiration = default;
            _newAccessTokenIsAdmin = false;
            _newAccessTokenClaims.Clear();
            _newAccessTokenClaims.Add(new ClaimData(default, default));
            _accessTokenMap = (await Client.V1.Users.GetMeAsync()).PersonalAccessTokens;
        }
        catch (Exception ex)
        {
            AppState.AddError(ex, Snackbar);
        }

        _isRefreshingToken = false;
        StateHasChanged();
    }

    private async Task DeleteTokenAsync(Guid id)
    {
        try
        {
            await Client.V1.Users.DeleteTokenAsync(id, CancellationToken.None);
            _accessTokenMap = (await Client.V1.Users.GetMeAsync()).PersonalAccessTokens;
        }
        catch (Exception ex)
        {
            AppState.AddError(ex, Snackbar);
        }
    }

    private string GetInitials(string name)
    {
        var parts = name.Split(" ", StringSplitOptions.RemoveEmptyEntries);
        var initials = string.Empty;

        foreach (var part in parts)
        {
            initials += part[0];
        }

        return initials.ToUpper();
    }

    private MarkupString GetHighlightedCode()
    {
        if (string.IsNullOrWhiteSpace(_jsonString))
            return new MarkupString("Please enter a valid JSON string.");

        try
        {
            var jsonElement = JsonSerializer.Deserialize<JsonElement>(_jsonString, JsonSerializerOptions.Web);
            var formattedJson = JsonSerializer.Serialize(jsonElement, _options);
            var highlightedJson = JSRuntime.Invoke<string>("nexus.util.highlight", formattedJson, "json");

            AppState.SetRequestConfiguration(jsonElement);

            return new MarkupString(highlightedJson);
        }
        catch
        {
            AppState.ClearRequestConfiguration();
            return new MarkupString("Invalid JSON string.");
        }
    }
}