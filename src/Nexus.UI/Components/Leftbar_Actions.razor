@implements IDisposable

@using System.Text.Json
@using System.Text

@inject ISnackbar Snackbar
@inject AppState AppState
@inject IJSInProcessRuntime JSRuntime

<div class="flex justify-between text-gray-200">

     <label>
        <InputFile class="hidden" OnChange="UploadSettingsAsync" accept="application/json" />
        <div class="p-4 flex flex-col justify-center items-center hover:text-orange-500 cursor-pointer">
            <span class="text-2xl mdi mdi-folder-open mb-1"></span>
            <span class="text-sm">Load</span>
        </div>
    </label>

    <div class="p-4 flex flex-col justify-center items-center hover:text-orange-500 cursor-pointer" @onclick="DownloadSettings">
        <span class="text-2xl mdi mdi-file-download mb-1"></span>
        <span class="text-sm">Save</span>
    </div>

    @if (AppState.Settings.CanVisualize)
    {
        <div class="p-4 flex flex-col justify-center items-center @(AppState.ViewState == ViewState.Data ? "text-orange-500" : "hover:text-orange-500") cursor-pointer" 
            @onclick="ToggleDataView">
            <span class="text-2xl mdi mdi-chart-areaspline mb-1"></span>
            <span class="text-sm">Visualize</span>
        </div>
    }
    else
    {
        <div class="p-4 flex flex-col justify-center items-center text-gray-400 cursor-not-allowed">
            <span class="text-2xl mdi mdi-chart-areaspline mb-1"></span>
            <span class="text-sm">Visualize</span>
        </div>
    }

</div>

@code {

    private PropertyChangedEventHandler _handler;

    public Leftbar_Actions()
    {
        _handler = (sender, e) =>
        {
            if (e.PropertyName == nameof(AppState.Settings.CanVisualize))
                StateHasChanged();
        };
    }

    protected override void OnInitialized()
    {
        AppState.Settings.PropertyChanged += _handler;
    }

    private async Task UploadSettingsAsync(InputFileChangeEventArgs e)
    {
        try
        {
            using var stream = e.File.OpenReadStream(maxAllowedSize: long.MaxValue);
            var exportParameters = await JsonSerializer.DeserializeAsync<ExportParameters>(stream, JsonSerializerOptions.Web);

            if (exportParameters is not null)
            {
                var catalogItemSelections = new List<CatalogItemSelectionViewModel>();
                var commonSamplePeriod = default(TimeSpan);

                foreach (var resourcePath in exportParameters.ResourcePaths)
                {
                    try
                    {
                        Utilities.ParseResourcePath(
                            resourcePath,
                            out var parseResult,
                            out var parsedParameters);

                        if (commonSamplePeriod.Equals(default))
                            commonSamplePeriod = parseResult.SamplePeriod;

                        else if (commonSamplePeriod != parseResult.SamplePeriod)
                            continue;

                        // select catalog
                        await AppState.RootCatalog.SelectCatalogAsync(parseResult.CatalogId);

                        if (AppState.SelectedCatalog is not null && 
                            AppState.SelectedCatalog.Catalog!.Resources is not null)
                        {
                            var catalog = AppState.SelectedCatalog.Catalog;

                            // find resource                            
                            var resource = catalog.Resources
                                .FirstOrDefault(resource => resource.Id == parseResult.ResourceId);

                            if (resource is not null && resource.Representations is not null)
                            {
                                // find representation
                                var representation = resource.Representations
                                    .FirstOrDefault(representation => representation.SamplePeriod == parseResult.BasePeriod!.Value);

                                if (representation is not null)
                                {
                                    // try find catalog item selection
                                    var catalogItemSelection = catalogItemSelections.FirstOrDefault(item => 
                                        item.BaseItem.Catalog.Id == catalog.Id &&
                                        item.BaseItem.Resource.Id == resource.Id &&
                                        item.BaseItem.Representation.SamplePeriod == representation.SamplePeriod &&
                                        (item.Parameters is null && parsedParameters is null ||
                                            (item.Parameters is not null && parsedParameters is not null &&
                                             item.Parameters.SequenceEqual(parsedParameters))));

                                    // there is none ... create a new one
                                    if (catalogItemSelection is null)
                                    {
                                        Dictionary<string, string>? matchedParameters = default;

                                        if (parsedParameters is not null && representation.Parameters is not null)
                                        {
                                            matchedParameters = parsedParameters
                                                .Where(parsedParameter => parsedParameter.Value is not null && representation.Parameters.Any(current => current.Key == parsedParameter.Key))
                                                .ToDictionary(
                                                    parsedParameter => parsedParameter.Key,
                                                    parsedParameter => parsedParameter.Value);

                                            // make sure all required parameters are there
                                            if (!matchedParameters.Keys.SequenceEqual(representation.Parameters.Keys))
                                                continue;
                                        }

                                        var catalogItem = new CatalogItemViewModel(catalog, resource, representation);
                                        catalogItemSelection = new CatalogItemSelectionViewModel(catalogItem, matchedParameters);
                                        catalogItemSelections.Add(catalogItemSelection);
                                    }

                                    // add the kind
                                    catalogItemSelection.Kinds.Add(parseResult.Kind);
                                }
                            }
                        }
                    }
                    catch (Exception)
                    {
                        //
                    }
                }

                AppState.Settings.SamplePeriod = new Period(commonSamplePeriod);
                AppState.Settings.SetSelectedCatalogItems(catalogItemSelections);
                AppState.ExportParameters = exportParameters;
            }
        }
        catch (Exception ex)
        {
            AppState.AddError(ex, Snackbar);
        }
    }
    private void DownloadSettings()
    {
        var exportParameters = AppState.Settings.GetExportParameters();
        var options = new JsonSerializerOptions() { WriteIndented = true };
        var jsonString = JsonSerializer.Serialize(exportParameters, options);

		JSRuntime.InvokeVoid("nexus.util.blobSaveAs", "nexus-settings.json", Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString)));
    }

    private void ToggleDataView()
    {
        if (AppState.ViewState == ViewState.Normal)
            AppState.ViewState = ViewState.Data;

        else
            AppState.ViewState = ViewState.Normal;
    }

    public void Dispose()
    {
        AppState.Settings.PropertyChanged -= _handler;
    }
}